apply plugin: libs.plugins.publish.get().pluginId

def isCi = System.getenv("CI")?.toBoolean()
def isTag = "tag".equalsIgnoreCase(System.getenv("GITHUB_REF_TYPE"))
def isValidTag = System.getenv("GITHUB_REF_NAME")?.startsWith("v")
def isRelease = isCi && isTag && isValidTag
println "@@@@@@@@@@@@@@@@@@@@ isCi: $isCi, isTag: $isTag, isValidTag: $isValidTag, isRelease: " +
        "$isRelease"
println "@@@@@@@@@@@@@@@@@@@@ GITHUB_REF_TYPE : ${System.getenv("GITHUB_REF_TYPE")}"
println "@@@@@@@@@@@@@@@@@@@@ GITHUB_REF_NAME : ${System.getenv("GITHUB_REF_NAME")}"
println "@@@@@@@@@@@@@@@@@@@@ GITHUB_JOB : ${System.getenv("GITHUB_JOB")}"
println "@@@@@@@@@@@@@@@@@@@@ GITHUB_REF : ${System.getenv("GITHUB_REF")}"
println "@@@@@@@@@@@@@@@@@@@@ GITHUB_REPOSITORY_ID : ${System.getenv("GITHUB_REPOSITORY_ID")}"
println "@@@@@@@@@@@@@@@@@@@@ GITHUB_REPOSITORY_OWNER : ${System.getenv("GITHUB_REPOSITORY_OWNER")}"

def r = release.versions
def artifact = r.artifactId.get()
def releaseVersion = "${r.major.get()}.${r.minor.get()}.${r.patch.get()}"
if (!isRelease) {
    releaseVersion += "-SNAPSHOT"
}

project.setGroup(r.groupId.get())
project.setVersion(releaseVersion)

tasks.withType(Javadoc).configureEach {
    source = sourceSets.main.allJava
    setFailOnError(false)
    options {
        noTimestamp false
        linkSource false
        docEncoding 'UTF-8'
        setMemberLevel JavadocMemberLevel.PUBLIC
        stylesheetFile file("$project.rootDir/assets/stylesheet.css")
    }

    destinationDir layout.buildDirectory.file("docs").get().asFile
    doFirst {
        classpath += fileTree(dir: layout.buildDirectory.file("classes"), include: "**/*.class")
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        production(MavenPublication) {
            artifactId = artifact
            version = releaseVersion
            from components.java
            pom {
                description = "Removes invalid objects during Gson parsing which are marked as required, yet null/empty."
                url = "https://venomvendor.github.io/NullDefense"
                packaging = "jar"
                inceptionYear = "2018"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "VenomVendor"
                        name = "VenomVendor"
                        email = "info@VenomVendor.com"
                        url = "https://VenomVendor.com"
                        timezone = "Asia/Kolkata"
                        organization = "Individual"
                    }
                }
                issueManagement {
                    system = "Github"
                    url = "https://github.com/VenomVendor/NullDefense/issues/"
                }
                scm {
                    url = "https://github.com/VenomVendor/NullDefense"
                    connection = "scm:git:ssh://git@github.com:VenomVendor/NullDefense.git"
                    developerConnection = "scm:git:ssh://git@github.com:VenomVendor/NullDefense.git"
                    tag = "main"
                }
            }
        }
    }
    repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"

            name = "OSSRH"
            url = uri(isRelease ? releaseRepo : snapshotRepo)
            url = snapshotRepo

            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

signing {
    def signingKeyId = System.getenv("SIGNING_KEY_ID")
    def signingKey = System.getenv("SIGNING_KEY")
    def signingPassword = System.getenv("SIGNING_PASSWORD")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)

    required { isRelease }

    sign publishing.publications.production
}
